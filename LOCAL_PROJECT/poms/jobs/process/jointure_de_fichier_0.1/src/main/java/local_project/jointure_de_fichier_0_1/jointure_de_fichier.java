// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.jointure_de_fichier_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: jointure_de_fichier Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class jointure_de_fichier implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "jointure_de_fichier";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					jointure_de_fichier.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(jointure_de_fichier.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class joinoutput1Struct implements
			routines.system.IPersistableRow<joinoutput1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String CustomerName;

		public String getCustomerName() {
			return this.CustomerName;
		}

		public String ContactName;

		public String getContactName() {
			return this.ContactName;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String OrderID;

		public String getOrderID() {
			return this.OrderID;
		}

		public String CustomerID_1;

		public String getCustomerID_1() {
			return this.CustomerID_1;
		}

		public String EmployeeID;

		public String getEmployeeID() {
			return this.EmployeeID;
		}

		public String OrderDate;

		public String getOrderDate() {
			return this.OrderDate;
		}

		public String ShipperID;

		public String getShipperID() {
			return this.ShipperID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CustomerID == null) ? 0 : this.CustomerID
								.hashCode());

				result = prime
						* result
						+ ((this.OrderID == null) ? 0 : this.OrderID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final joinoutput1Struct other = (joinoutput1Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			if (this.OrderID == null) {
				if (other.OrderID != null)
					return false;

			} else if (!this.OrderID.equals(other.OrderID))

				return false;

			return true;
		}

		public void copyDataTo(joinoutput1Struct other) {

			other.CustomerID = this.CustomerID;
			other.CustomerName = this.CustomerName;
			other.ContactName = this.ContactName;
			other.Address = this.Address;
			other.City = this.City;
			other.PostalCode = this.PostalCode;
			other.Country = this.Country;
			other.OrderID = this.OrderID;
			other.CustomerID_1 = this.CustomerID_1;
			other.EmployeeID = this.EmployeeID;
			other.OrderDate = this.OrderDate;
			other.ShipperID = this.ShipperID;

		}

		public void copyKeysDataTo(joinoutput1Struct other) {

			other.CustomerID = this.CustomerID;
			other.OrderID = this.OrderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length == 0) {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.CustomerName = readString(dis);

					this.ContactName = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

					this.PostalCode = readString(dis);

					this.Country = readString(dis);

					this.OrderID = readString(dis);

					this.CustomerID_1 = readString(dis);

					this.EmployeeID = readString(dis);

					this.OrderDate = readString(dis);

					this.ShipperID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.CustomerName, dos);

				// String

				writeString(this.ContactName, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.PostalCode, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.OrderID, dos);

				// String

				writeString(this.CustomerID_1, dos);

				// String

				writeString(this.EmployeeID, dos);

				// String

				writeString(this.OrderDate, dos);

				// String

				writeString(this.ShipperID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",CustomerName=" + CustomerName);
			sb.append(",ContactName=" + ContactName);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",Country=" + Country);
			sb.append(",OrderID=" + OrderID);
			sb.append(",CustomerID_1=" + CustomerID_1);
			sb.append(",EmployeeID=" + EmployeeID);
			sb.append(",OrderDate=" + OrderDate);
			sb.append(",ShipperID=" + ShipperID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(joinoutput1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID,
					other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.OrderID, other.OrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[0];

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String CustomerName;

		public String getCustomerName() {
			return this.CustomerName;
		}

		public String ContactName;

		public String getContactName() {
			return this.ContactName;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length == 0) {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.CustomerName = readString(dis);

					this.ContactName = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

					this.PostalCode = readString(dis);

					this.Country = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.CustomerName, dos);

				// String

				writeString(this.ContactName, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.PostalCode, dos);

				// String

				writeString(this.Country, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",CustomerName=" + CustomerName);
			sb.append(",ContactName=" + ContactName);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",Country=" + Country);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String CustomerName;

		public String getCustomerName() {
			return this.CustomerName;
		}

		public String ContactName;

		public String getContactName() {
			return this.ContactName;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CustomerID == null) ? 0 : this.CustomerID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.CustomerID = this.CustomerID;
			other.CustomerName = this.CustomerName;
			other.ContactName = this.ContactName;
			other.Address = this.Address;
			other.City = this.City;
			other.PostalCode = this.PostalCode;
			other.Country = this.Country;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length == 0) {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

					this.CustomerName = readString(dis);

					this.ContactName = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

					this.PostalCode = readString(dis);

					this.Country = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

				// String

				writeString(this.CustomerName, dos);

				// String

				writeString(this.ContactName, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.PostalCode, dos);

				// String

				writeString(this.Country, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + CustomerID);
			sb.append(",CustomerName=" + CustomerName);
			sb.append(",ContactName=" + ContactName);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",Country=" + Country);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID,
					other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				joinoutput1Struct joinoutput1 = new joinoutput1Struct();

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("joinoutput1"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				int nb_line_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "C:/Talend/REP_FORM/SORTIE/commande+clients.xls";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(
						fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1
						.getParentFile();
				if (parentFile_tFileOutputExcel_1 != null
						&& !parentFile_tFileOutputExcel_1.exists()) {

					parentFile_tFileOutputExcel_1.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										fileName_tFileOutputExcel_1)), true,
						workbookSettings_tFileOutputExcel_1);

				writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
						.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_1 == null) {
					writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
							.createSheet("Sheet1",
									writeableWorkbook_tFileOutputExcel_1
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_1 = new int[12];
				for (int i_tFileOutputExcel_1 = 0; i_tFileOutputExcel_1 < 12; i_tFileOutputExcel_1++) {
					int fitCellViewSize_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
							.getColumnView(i_tFileOutputExcel_1).getSize();
					fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] = fitCellViewSize_tFileOutputExcel_1 / 256;
					if (fitCellViewSize_tFileOutputExcel_1 % 256 != 0) {
						fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				joinoutput1Struct joinoutput1_tmp = new joinoutput1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Talend/REP_FORM/SOURCE/Clients.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Talend/REP_FORM/SOURCE/Clients.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.CustomerID = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.CustomerName = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.ContactName = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Address = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.City = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.PostalCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Country = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row2"
							// /////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row2HashKey.CustomerID = row1.CustomerID;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null
									&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CustomerID = '"
								// + row2HashKey.CustomerID + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null
									&& tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								joinoutput1 = null;

								// # Output table : 'joinoutput1'
								joinoutput1_tmp.CustomerID = row1.CustomerID;
								joinoutput1_tmp.CustomerName = row1.CustomerName;
								joinoutput1_tmp.ContactName = row1.ContactName;
								joinoutput1_tmp.Address = row1.Address;
								joinoutput1_tmp.City = row1.City;
								joinoutput1_tmp.PostalCode = row1.PostalCode;
								joinoutput1_tmp.Country = row1.Country;
								joinoutput1_tmp.OrderID = row2.OrderID;
								joinoutput1_tmp.CustomerID_1 = row2.CustomerID;
								joinoutput1_tmp.EmployeeID = row2.EmployeeID;
								joinoutput1_tmp.OrderDate = row2.OrderDate;
								joinoutput1_tmp.ShipperID = row2.ShipperID;
								joinoutput1 = joinoutput1_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "joinoutput1"
							if (joinoutput1 != null) {

								/**
								 * [tFileOutputExcel_1 main ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								// joinoutput1
								// joinoutput1

								if (execStat) {
									runStat.updateStatOnConnection(
											"joinoutput1" + iterateId, 1, 1);
								}

								if (joinoutput1.CustomerID != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 0;

									jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.CustomerID);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_0_tFileOutputExcel_1);
									int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[0] = fitWidth_tFileOutputExcel_1[0] > currentWith_0_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[0]
											: currentWith_0_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.CustomerName != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 1;

									jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.CustomerName);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_1_tFileOutputExcel_1);
									int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[1] = fitWidth_tFileOutputExcel_1[1] > currentWith_1_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[1]
											: currentWith_1_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.ContactName != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 2;

									jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.ContactName);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_2_tFileOutputExcel_1);
									int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[2] = fitWidth_tFileOutputExcel_1[2] > currentWith_2_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[2]
											: currentWith_2_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.Address != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 3;

									jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.Address);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_3_tFileOutputExcel_1);
									int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[3] = fitWidth_tFileOutputExcel_1[3] > currentWith_3_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[3]
											: currentWith_3_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.City != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 4;

									jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.City);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_4_tFileOutputExcel_1);
									int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[4] = fitWidth_tFileOutputExcel_1[4] > currentWith_4_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[4]
											: currentWith_4_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.PostalCode != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 5;

									jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.PostalCode);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_5_tFileOutputExcel_1);
									int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[5] = fitWidth_tFileOutputExcel_1[5] > currentWith_5_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[5]
											: currentWith_5_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.Country != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 6;

									jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.Country);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_6_tFileOutputExcel_1);
									int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[6] = fitWidth_tFileOutputExcel_1[6] > currentWith_6_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[6]
											: currentWith_6_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.OrderID != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 7;

									jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.OrderID);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_7_tFileOutputExcel_1);
									int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[7] = fitWidth_tFileOutputExcel_1[7] > currentWith_7_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[7]
											: currentWith_7_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.CustomerID_1 != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 8;

									jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.CustomerID_1);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_8_tFileOutputExcel_1);
									int currentWith_8_tFileOutputExcel_1 = cell_8_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[8] = fitWidth_tFileOutputExcel_1[8] > currentWith_8_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[8]
											: currentWith_8_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.EmployeeID != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 9;

									jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.EmployeeID);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_9_tFileOutputExcel_1);
									int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[9] = fitWidth_tFileOutputExcel_1[9] > currentWith_9_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[9]
											: currentWith_9_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.OrderDate != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 10;

									jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.OrderDate);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_10_tFileOutputExcel_1);
									int currentWith_10_tFileOutputExcel_1 = cell_10_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[10] = fitWidth_tFileOutputExcel_1[10] > currentWith_10_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[10]
											: currentWith_10_tFileOutputExcel_1 + 2;
								}

								if (joinoutput1.ShipperID != null) {

									// modif start

									columnIndex_tFileOutputExcel_1 = 11;

									jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Label(
											columnIndex_tFileOutputExcel_1,
											startRowNum_tFileOutputExcel_1
													+ nb_line_tFileOutputExcel_1,

											// modif end
											joinoutput1.ShipperID);
									// modif start
									// If we keep the cell format from the
									// existing cell in sheet

									// modif ends
									writableSheet_tFileOutputExcel_1
											.addCell(cell_11_tFileOutputExcel_1);
									int currentWith_11_tFileOutputExcel_1 = cell_11_tFileOutputExcel_1
											.getContents().trim().length();
									fitWidth_tFileOutputExcel_1[11] = fitWidth_tFileOutputExcel_1[11] > currentWith_11_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[11]
											: currentWith_11_tFileOutputExcel_1 + 2;
								}

								nb_line_tFileOutputExcel_1++;

								tos_count_tFileOutputExcel_1++;

								/**
								 * [tFileOutputExcel_1 main ] stop
								 */

								/**
								 * [tFileOutputExcel_1 process_data_begin ]
								 * start
								 */

								currentComponent = "tFileOutputExcel_1";

								/**
								 * [tFileOutputExcel_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputExcel_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								/**
								 * [tFileOutputExcel_1 process_data_end ] stop
								 */

							} // End of branch "joinoutput1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Talend/REP_FORM/SOURCE/Clients.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				writeableWorkbook_tFileOutputExcel_1.write();
				writeableWorkbook_tFileOutputExcel_1.close();

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("joinoutput1"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OrderID;

		public String getOrderID() {
			return this.OrderID;
		}

		public String CustomerID;

		public String getCustomerID() {
			return this.CustomerID;
		}

		public String EmployeeID;

		public String getEmployeeID() {
			return this.EmployeeID;
		}

		public String OrderDate;

		public String getOrderDate() {
			return this.OrderDate;
		}

		public String ShipperID;

		public String getShipperID() {
			return this.ShipperID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CustomerID == null) ? 0 : this.CustomerID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.CustomerID == null) {
				if (other.CustomerID != null)
					return false;

			} else if (!this.CustomerID.equals(other.CustomerID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.OrderID = this.OrderID;
			other.CustomerID = this.CustomerID;
			other.EmployeeID = this.EmployeeID;
			other.OrderDate = this.OrderDate;
			other.ShipperID = this.ShipperID;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_jointure_de_fichier.length == 0) {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_jointure_de_fichier, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_jointure_de_fichier) {

				try {

					int length = 0;

					this.CustomerID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CustomerID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.OrderID = readString(dis, ois);

				this.EmployeeID = readString(dis, ois);

				this.OrderDate = readString(dis, ois);

				this.ShipperID = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.OrderID, dos, oos);

				writeString(this.EmployeeID, dos, oos);

				writeString(this.OrderDate, dos, oos);

				writeString(this.ShipperID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderID=" + OrderID);
			sb.append(",CustomerID=" + CustomerID);
			sb.append(",EmployeeID=" + EmployeeID);
			sb.append(",OrderDate=" + OrderDate);
			sb.append(",ShipperID=" + ShipperID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID,
					other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2)
				// outputs:(joinoutput1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Talend/REP_FORM/SOURCE/Commandes.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Talend/REP_FORM/SOURCE/Commandes.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row2.OrderID = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.CustomerID = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.EmployeeID = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row2.OrderDate = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row2.ShipperID = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.OrderID = row2.OrderID;

							row2_HashRow.CustomerID = row2.CustomerID;

							row2_HashRow.EmployeeID = row2.EmployeeID;

							row2_HashRow.OrderDate = row2.OrderDate;

							row2_HashRow.ShipperID = row2.ShipperID;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Talend/REP_FORM/SOURCE/Commandes.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final jointure_de_fichier jointure_de_fichierClass = new jointure_de_fichier();

		int exitCode = jointure_de_fichierClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = jointure_de_fichier.class
					.getClassLoader().getResourceAsStream(
							"local_project/jointure_de_fichier_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = jointure_de_fichier.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : jointure_de_fichier");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 88124 characters generated by Talend Open Studio for Data Integration on the
 * 24 mars 2020 17:29:11 CET
 ************************************************************************************************/
